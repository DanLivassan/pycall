Basic specification documentation / tests for pycall.


pycall is a flexible python library for creating and using Asterisk call files.
pycall provides python developers with a simple API that allows them to:

* Create Asterisk call files out of python objects.
* Perform error checking on call files before they are spooled.
* Spool call file objects with Asterisk immediately.
* Spool call file obejcts with Asterisk at a specific date and time.
* Use any call file attributes that Asterisk allows.
* Transparently perform all file operations.
* Perform all necessary permission checks and changes.
* Spool call files to local or mounted devices.
* Associate any additional `CallFile` attributes your `CallFile` needs (for
  pragmatic purposes) directly with your `CallFile` object.


The rest of this file contains doctest code to show how pycall works in a
simple way.


Make sure the `CallFile` class is available for usage:

>>> from pycall import CallFile


Make sure we can create a `CallFile` object:

>>> cf = CallFile('Local/18002223333@outgoing')


Make sure each call file contains a valid action:

>>> cf.spool() # doctest:+ELLIPSIS
Traceback (most recent call last):
	...
NoActionDefinedError: ...


Every call file must contain at least one valid action. There are two types of
actions allowed: applications and contexts. To use applications, you must
specify `application` and `data`. To use contexts, you must specify `context`,
`extension`, and `priority`.

Make sure we can successfully spool a call file using the `application` action:

>>> cf.application = 'Playback'
>>> cf.data = 'tt-monkeys'
>>> cf.spool()

Remove the `application` and `data` attributes specified above:

>>> del cf.application
>>> del cf.data

Make sure we can spool a call file using the `context` action:

>>> cf.context = 'dostuff'
>>> cf.extension = 's'
>>> cf.priority = '1'
>>> cf.spool()
